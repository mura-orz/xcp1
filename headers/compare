///	@file
///	@brief	ISO/IEC14882 C++ standard header <compare>
///	@author	Mura
///	@copyright	(C) 2024-, Mura

#ifndef __XXX_compare
#define __XXX_compare

//#define __cpp_lib_three_way_comparison		(201907L)

namespace std {

class partial_ordering;
class weak_ordering;
class strong_ordering;

inline constexpr bool is_eq(partial_ordering _cmp) noexcept { return _cmp == 0; }
inline constexpr bool is_neq(partial_ordering _cmp) noexcept { return _cmp != 0; }
inline constexpr bool is_lt(partial_ordering _cmp) noexcept { return _cmp < 0; }
inline constexpr bool is_lteq(partial_ordering _cmp) noexcept { return _cmp <= 0; }
inline constexpr bool is_gt(partial_ordering _cmp) noexcept { return _cmp > 0; }
inline constexpr bool is_gteq(partial_ordering _cmp) noexcept { return _cmp >= 0; }

template<class... _Ts>
struct common_comparison_category { using type = int; };	// TODO:
template<class... _Ts>
using common_comparison_category_t = typename common_comparison_category<_Ts...>::type;
template<class _T, class _Cat = partial_ordering>
concept three_way_comparable = {};	  // TODO:
template<class _T, class _U, class _Cat = partial_ordering>
concept three_way_comparable_with = {};	   // TODO:
template<class _T, class _U = _T>
struct compare_three_way_result;
template<class _T, class _U = _T>
using compare_three_way_result_t = typename compare_three_way_result<_T, _U>::type;
struct compare_three_way;
inline namespace unspecified {
inline constexpr int strong_order					= 0;	// TODO:
inline constexpr int weak_order						= 0;	// TODO:
inline constexpr int partial_order					= 0;	// TODO:
inline constexpr int compare_strong_order_fallback	= 0;	// TODO:
inline constexpr int compare_weak_order_fallback	= 0;	// TODO:
inline constexpr int compare_partial_order_fallback = 0;	// TODO:
}	 // namespace unspecified

}	 // namespace std

#endif	  // __XXX_compare
