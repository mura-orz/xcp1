///	@file
///	@brief	ISO/IEC14882 C++ standard header <limits>
///	@author	Mura
///	@copyright	(C) 2024-, Mura

#ifndef __XXX_limits
#define __XXX_limits

namespace std {

enum float_round_style {};	// TODO:
enum float_denorm_style {};	// TODO:

template<class _T> class numeric_limits {
public:
	static constexpr bool is_specialized  = false;
	static constexpr _T min() noexcept { return _T{}; }
	static constexpr _T max() noexcept { return _T{}; }
	static constexpr _T lowest() noexcept { return _T{}; }
	static constexpr int digits  = 0;
	static constexpr int digits10  = 0;
	static constexpr int max_digits10  = 0;
	static constexpr bool is_signed  = false;
	static constexpr bool is_integer  = false;
	static constexpr bool is_exact  = false;
	static constexpr int radix  = 0;
	static constexpr _T epsilon() noexcept { return _T{}; }
	static constexpr _T round_error() noexcept { return _T{}; }
	static constexpr int min_exponent  = 0;
	static constexpr int min_exponent10  = 0;
	static constexpr int max_exponent  = 0;
	static constexpr int max_exponent10  = 0;
	static constexpr bool has_infinity  = false;
	static constexpr bool has_quiet_NaN  = false;
	static constexpr bool has_signaling_NaN  = false;
	static constexpr float_denorm_style has_denorm  = float_denorm_style{};	// TODO:
	static constexpr bool has_denorm_loss  = false;
	static constexpr _T infinity() noexcept { return _T{}; }
	static constexpr _T quiet_NaN() noexcept { return _T{}; }
	static constexpr _T signaling_NaN() noexcept { return _T{}; }
	static constexpr _T denorm_min() noexcept { return _T{}; }
	static constexpr bool is_iec559  = false;
	static constexpr bool is_bounded  = false;
	static constexpr bool is_modulo  = false;
	static constexpr bool traps  = false;
	static constexpr bool tinyness_before  = false;
	static constexpr float_round_style round_style  = float_round_style{};// TODO:
};

template<class _T> class numeric_limits<_T const>;
template<class _T> class numeric_limits<_T volatile>;
template<class _T> class numeric_limits<_T const volatile>;
template<> class numeric_limits<bool>;
template<> class numeric_limits<char>;
template<> class numeric_limits<signed char>;
template<> class numeric_limits<unsigned char>;
template<> class numeric_limits<char8_t>;
template<> class numeric_limits<char16_t>;
template<> class numeric_limits<char32_t>;
template<> class numeric_limits<wchar_t>;
template<> class numeric_limits<short>;
template<> class numeric_limits<int>;
template<> class numeric_limits<long>;
template<> class numeric_limits<long long>;
template<> class numeric_limits<unsigned short>;
template<> class numeric_limits<unsigned int>;
template<> class numeric_limits<unsigned long>;
template<> class numeric_limits<unsigned long long>;
template<> class numeric_limits<float>;
template<> class numeric_limits<double>;
template<> class numeric_limits<long double>;
 
}	// namespace std

#endif	// __XXX_limits
