///	@file
///	@brief	ISO/IEC14882 _C++ standard header <type_traits>
///	@author	Mura
///	@copyright	(C) 2024-, _Mura

#ifndef __XXX_type_traits
#define __XXX_type_traits

namespace std {

template<class _T, _T v>								struct integral_constant;	// TODO:
template<bool _B>										using bool_constant		= integral_constant<bool, _B>;
														using true_type			= bool_constant<true>;
														using false_type		= bool_constant<false>;
template<class _T>										struct is_void;
template<class _T>										struct is_null_pointer;
template<class _T>										struct is_integral;
template<class _T>										struct is_floating_point;
template<class _T>										struct is_array;
template<class _T>										struct is_pointer;
template<class _T>										struct is_lvalue_reference;
template<class _T>										struct is_rvalue_reference;
template<class _T>										struct is_member_object_pointer;
template<class _T>										struct is_member_function_pointer;
template<class _T>										struct is_enum;
template<class _T>										struct is_union;
template<class _T>										struct is_class;
template<class _T>										struct is_function;
template<class _T>										struct is_reference;
template<class _T>										struct is_arithmetic;
template<class _T>										struct is_fundamental;
template<class _T>										struct is_object;
template<class _T>										struct is_scalar;
template<class _T>										struct is_compound;
template<class _T>										struct is_member_pointer;
template<class _T>										struct is_const;
template<class _T>										struct is_volatile;
template<class _T>										struct is_trivial;
template<class _T>										struct is_trivially_copyable;
template<class _T>										struct is_standard_layout;
template<class _T>										struct is_empty;
template<class _T>										struct is_polymorphic;
template<class _T>										struct is_abstract;
template<class _T>										struct is_final;
template<class _T>										struct is_aggregate;
template<class _T>										struct is_signed;
template<class _T>										struct is_unsigned;
template<class _T>										struct is_bounded_array;
template<class _T>										struct is_unbounded_array;
template<class _T, class... _Args>						struct is_constructible;
template<class _T>										struct is_default_constructible;
template<class _T>										struct is_copy_constructible;
template<class _T>										struct is_move_constructible;
template<class _T, class _U>							struct is_assignable;
template<class _T>										struct is_copy_assignable;
template<class _T>										struct is_move_assignable;
template<class _T, class _U>							struct is_swappable_with;
template<class _T>										struct is_swappable;
template<class _T>										struct is_destructible;
template<class _T, class... _Args>						struct is_trivially_constructible;
template<class _T>										struct is_trivially_default_constructible;
template<class _T>										struct is_trivially_copy_constructible;
template<class _T>										struct is_trivially_move_constructible;
template<class _T, class _U>							struct is_trivially_assignable;
template<class _T>										struct is_trivially_copy_assignable;
template<class _T>										struct is_trivially_move_assignable;
template<class _T>										struct is_trivially_destructible;
template<class _T, class... _Args>						struct is_nothrow_constructible;
template<class _T>										struct is_nothrow_default_constructible;
template<class _T>										struct is_nothrow_copy_constructible;
template<class _T>										struct is_nothrow_move_constructible;
template<class _T, class _U>							struct is_nothrow_assignable;
template<class _T>										struct is_nothrow_copy_assignable;
template<class _T>										struct is_nothrow_move_assignable;
template<class _T, class _U>							struct is_nothrow_swappable_with;
template<class _T>										struct is_nothrow_swappable;
template<class _T>										struct is_nothrow_destructible;
template<class _T>										struct has_virtual_destructor;
template<class _T>										struct has_unique_object_representations;
template<class _T>										struct alignment_of;
template<class _T>										struct rank;
template<class _T, unsigned _I = 0>						struct extent;
template<class _T, class _U>							struct is_same;
template<class _Base, class _Derived>					struct is_base_of;
template<class _From, class _To>						struct is_convertible;
template<class _From, class _To>						struct is_nothrow_convertible;
template<class _T, class _U>							struct is_layout_compatible;
template<class _Base, class _Derived>					struct is_pointer_interconvertible_base_of;
template<class _Fn, class... _ArgTypes>					struct is_invocable;
template<class _R, class _Fn, class... _ArgTypes>		struct is_invocable_r;
template<class _Fn, class... _ArgTypes>					struct is_nothrow_invocable;
template<class _R, class _Fn, class... _ArgTypes>		struct is_nothrow_invocable_r;
template<class _T>										struct remove_const;
template<class _T>										struct remove_volatile;
template<class _T>										struct remove_cv;
template<class _T>										struct add_const;
template<class _T>										struct add_volatile;
template<class _T>										struct add_cv;
template<class _T>										using remove_const_t										= typename remove_const<_T>::type;
template<class _T>										using remove_volatile_t										= typename remove_volatile<_T>::type;
template<class _T>										using remove_cv_t											= typename remove_cv<_T>::type;
template<class _T>										using add_const_t											= typename add_const<_T>::type;
template<class _T>										using add_volatile_t										= typename add_volatile<_T>::type;
template<class _T>										using add_cv_t												= typename add_cv<_T>::type;
template<class _T>										struct remove_reference;
template<class _T>										struct add_lvalue_reference;
template<class _T>										struct add_rvalue_reference;
template<class _T>										using remove_reference_t									= typename remove_reference<_T>::type;
template<class _T>										using add_lvalue_reference_t								= typename add_lvalue_reference<_T>::type;
template<class _T>										using add_rvalue_reference_t								= typename add_rvalue_reference<_T>::type;
template<class _T>										struct make_signed;
template<class _T>										struct make_unsigned;
template<class _T>										using make_signed_t											= typename make_signed<_T>::type;
template<class _T>										using make_unsigned_t										= typename make_unsigned<_T>::type;
template<class _T>										struct remove_extent;
template<class _T>										struct remove_all_extents;
template<class _T>										using remove_extent_t										= typename remove_extent<_T>::type;
template<class _T>										using remove_all_extents_t									= typename remove_all_extents<_T>::type;
template<class _T>										struct remove_pointer;
template<class _T>										struct add_pointer;
template<class _T>										using remove_pointer_t										= typename remove_pointer<_T>::type;
template<class _T>										using add_pointer_t											= typename add_pointer<_T>::type;
template<class _T>										struct type_identity;
template<size_t _Len, size_t _Align = 4>				struct aligned_storage;
template<size_t _Len, class... _Types>					struct aligned_union;
template<class _T>										struct remove_cvref;
template<class _T>										struct decay;
template<bool, class _T = void>							struct enable_if;
template<bool, class _T, class _F>						struct conditional;
template<class... _T>									struct common_type;
template<class _T, class _U, template<class> class _TQual, template<class> class _UQual>	struct basic_common_reference { };
template<class... _T>									struct common_reference;
template<class _T>										struct underlying_type;
template<class _Fn, class... _ArgTypes>					struct invoke_result;
template<class _T>										struct unwrap_reference;
template<class _T>										struct unwrap_ref_decay;
template<class _T>										using type_identity_t										= typename type_identity<_T>::type;
template<size_t _Len, size_t _Align = 4>				using aligned_storage_t										= typename aligned_storage<_Len, _Align>::type;
template<size_t _Len, class... _Types>					using aligned_union_t										= typename aligned_union<_Len, _Types...>::type;
template<class _T>										using remove_cvref_t										= typename remove_cvref<_T>::type;
template<class _T>										using decay_t												= typename decay<_T>::type;
template<bool b, class _T = void>						using enable_if_t											= typename enable_if<b, _T>::type;
template<bool b, class _T, class _F>					using conditional_t											= typename conditional<b, _T, _F>::type;
template<class... _T>									using common_type_t											= typename common_type<_T...>::type;
template<class... _T>									using common_reference_t									= typename common_reference<_T...>::type;
template<class _T>										using underlying_type_t										= typename underlying_type<_T>::type;
template<class _Fn, class... _ArgTypes>					using invoke_result_t										= typename invoke_result<_Fn, _ArgTypes...>::type;
template<class _T>										using unwrap_reference_t									= typename unwrap_reference<_T>::type;
template<class _T>										using unwrap_ref_decay_t									= typename unwrap_ref_decay<_T>::type;
template<class...>										using void_t												= void;
template<class... _B>									struct conjunction;
template<class... _B>									struct disjunction;
template<class _B>										struct negation;
template<class _T>										inline constexpr bool is_void_v								= is_void<_T>::value;
template<class _T>										inline constexpr bool is_null_pointer_v						= is_null_pointer<_T>::value;
template<class _T>										inline constexpr bool is_integral_v							= is_integral<_T>::value;
template<class _T>										inline constexpr bool is_floating_point_v					= is_floating_point<_T>::value;
template<class _T>										inline constexpr bool is_array_v							= is_array<_T>::value;
template<class _T>										inline constexpr bool is_pointer_v							= is_pointer<_T>::value;
template<class _T>										inline constexpr bool is_lvalue_reference_v					= is_lvalue_reference<_T>::value;
template<class _T>										inline constexpr bool is_rvalue_reference_v					= is_rvalue_reference<_T>::value;
template<class _T>										inline constexpr bool is_member_object_pointer_v			= is_member_object_pointer<_T>::value;
template<class _T>										inline constexpr bool is_member_function_pointer_v			= is_member_function_pointer<_T>::value;
template<class _T>										inline constexpr bool is_enum_v								= is_enum<_T>::value;
template<class _T>										inline constexpr bool is_union_v							= is_union<_T>::value;
template<class _T>										inline constexpr bool is_class_v							= is_class<_T>::value;
template<class _T>										inline constexpr bool is_function_v							= is_function<_T>::value;
template<class _T>										inline constexpr bool is_reference_v						= is_reference<_T>::value;
template<class _T>										inline constexpr bool is_arithmetic_v						= is_arithmetic<_T>::value;
template<class _T>										inline constexpr bool is_fundamental_v						= is_fundamental<_T>::value;
template<class _T>										inline constexpr bool is_object_v							= is_object<_T>::value;
template<class _T>										inline constexpr bool is_scalar_v							= is_scalar<_T>::value;
template<class _T>										inline constexpr bool is_compound_v							= is_compound<_T>::value;
template<class _T>										inline constexpr bool is_member_pointer_v					= is_member_pointer<_T>::value;
template<class _T>										inline constexpr bool is_const_v							= is_const<_T>::value;
template<class _T>										inline constexpr bool is_volatile_v							= is_volatile<_T>::value;template<class _T>
														inline constexpr bool is_trivial_v							= is_trivial<_T>::value;
template<class _T>										inline constexpr bool is_trivially_copyable_v				= is_trivially_copyable<_T>::value;
template<class _T>										inline constexpr bool is_standard_layout_v					= is_standard_layout<_T>::value;
template<class _T>										inline constexpr bool is_empty_v							= is_empty<_T>::value;
template<class _T>										inline constexpr bool is_polymorphic_v						= is_polymorphic<_T>::value;
template<class _T>										inline constexpr bool is_abstract_v							= is_abstract<_T>::value;
template<class _T>										inline constexpr bool is_final_v							= is_final<_T>::value;
template<class _T>										inline constexpr bool is_aggregate_v						= is_aggregate<_T>::value;
template<class _T>										inline constexpr bool is_signed_v							= is_signed<_T>::value;
template<class _T>										inline constexpr bool is_unsigned_v							= is_unsigned<_T>::value;
template<class _T>										inline constexpr bool is_bounded_array_v					= is_bounded_array<_T>::value;
template<class _T>										inline constexpr bool is_unbounded_array_v					= is_unbounded_array<_T>::value;
template<class _T, class... _Args>						inline constexpr bool is_constructible_v					= is_constructible<_T, _Args...>::value;
template<class _T>										inline constexpr bool is_default_constructible_v			= is_default_constructible<_T>::value;
template<class _T>										inline constexpr bool is_copy_constructible_v				= is_copy_constructible<_T>::value;
template<class _T>										inline constexpr bool is_move_constructible_v				= is_move_constructible<_T>::value;
template<class _T, class _U>							inline constexpr bool is_assignable_v						= is_assignable<_T, _U>::value;
template<class _T>										inline constexpr bool is_copy_assignable_v					= is_copy_assignable<_T>::value;
template<class _T>										inline constexpr bool is_move_assignable_v					= is_move_assignable<_T>::value;
template<class _T, class _U>							inline constexpr bool is_swappable_with_v					= is_swappable_with<_T, _U>::value;
template<class _T>										inline constexpr bool is_swappable_v						= is_swappable<_T>::value;
template<class _T>										inline constexpr bool is_destructible_v						= is_destructible<_T>::value;
template<class _T, class... _Args>						inline constexpr bool is_trivially_constructible_v			= is_trivially_constructible<_T, _Args...>::value;
template<class _T>										inline constexpr bool is_trivially_default_constructible_v	= is_trivially_default_constructible<_T>::value;
template<class _T>										inline constexpr bool is_trivially_copy_constructible_v		= is_trivially_copy_constructible<_T>::value;
template<class _T>										inline constexpr bool is_trivially_move_constructible_v		= is_trivially_move_constructible<_T>::value;
template<class _T, class _U>							inline constexpr bool is_trivially_assignable_v				= is_trivially_assignable<_T, _U>::value;
template<class _T>										inline constexpr bool is_trivially_copy_assignable_v		= is_trivially_copy_assignable<_T>::value;
template<class _T>										inline constexpr bool is_trivially_move_assignable_v		= is_trivially_move_assignable<_T>::value;
template<class _T>										inline constexpr bool is_trivially_destructible_v			= is_trivially_destructible<_T>::value;
template<class _T, class... _Args>						inline constexpr bool is_nothrow_constructible_v			= is_nothrow_constructible<_T, _Args...>::value;
template<class _T>										inline constexpr bool is_nothrow_default_constructible_v	= is_nothrow_default_constructible<_T>::value;
template<class _T>										inline constexpr bool is_nothrow_copy_constructible_v		= is_nothrow_copy_constructible<_T>::value;
template<class _T>										inline constexpr bool is_nothrow_move_constructible_v		= is_nothrow_move_constructible<_T>::value;
template<class _T, class _U>							inline constexpr bool is_nothrow_assignable_v				= is_nothrow_assignable<_T, _U>::value;
template<class _T>										inline constexpr bool is_nothrow_copy_assignable_v			= is_nothrow_copy_assignable<_T>::value;
template<class _T>										inline constexpr bool is_nothrow_move_assignable_v			= is_nothrow_move_assignable<_T>::value;
template<class _T, class _U>							inline constexpr bool is_nothrow_swappable_with_v			= is_nothrow_swappable_with<_T, _U>::value;
template<class _T>										inline constexpr bool is_nothrow_swappable_v				= is_nothrow_swappable<_T>::value;
template<class _T>										inline constexpr bool is_nothrow_destructible_v				= is_nothrow_destructible<_T>::value;
template<class _T>										inline constexpr bool has_virtual_destructor_v				= has_virtual_destructor<_T>::value;
template<class _T>										inline constexpr bool has_unique_object_representations_v	= has_unique_object_representations<_T>::value;
template<class _T>										inline constexpr size_t alignment_of_v						= alignment_of<_T>::value;
template<class _T>										inline constexpr size_t rank_v								= rank<_T>::value;
template<class _T, unsigned _I = 0>						inline constexpr size_t extent_v							= extent<_T, _I>::value;
template<class _T, class _U>							inline constexpr bool is_same_v								= is_same<_T, _U>::value;
template<class _Base, class _Derived>					inline constexpr bool is_base_of_v							= is_base_of<_Base, _Derived>::value;
template<class _From, class _To>						inline constexpr bool is_convertible_v						= is_convertible<_From, _To>::value;
template<class _From, class _To>						inline constexpr bool is_nothrow_convertible_v				= is_nothrow_convertible<_From, _To>::value;
template<class _T, class _U>							inline constexpr bool is_layout_compatible_v				= is_layout_compatible<_T, _U>::value;
template<class _Base, class _Derived>					inline constexpr bool is_pointer_interconvertible_base_of_v	= is_pointer_interconvertible_base_of<_Base, _Derived>::value;
template<class _Fn, class... _ArgTypes>					inline constexpr bool is_invocable_v						= is_invocable<_Fn, _ArgTypes...>::value;
template<class _R, class _Fn, class... _ArgTypes>		inline constexpr bool is_invocable_r_v						= is_invocable_r<_R, _Fn, _ArgTypes...>::value;
template<class _Fn, class... _ArgTypes>					inline constexpr bool is_nothrow_invocable_v				= is_nothrow_invocable<_Fn, _ArgTypes...>::value;
template<class _R, class _Fn, class... _ArgTypes>		inline constexpr bool is_nothrow_invocable_r_v				= is_nothrow_invocable_r<_R, _Fn, _ArgTypes...>::value;
template<class... _B>									inline constexpr bool conjunction_v							= conjunction<_B...>::value;
template<class... _B>									inline constexpr bool disjunction_v							= disjunction<_B...>::value;
template<class _B>										inline constexpr bool negation_v							= negation<_B>::value;
template<class _S, class _M>							inline constexpr bool is_pointer_interconvertible_with_class(_M _S::*m) noexcept	{ return false; }	// _TODO:
template<class _S1, class _S2, class _M1, class _M2>	inline constexpr bool is_corresponding_member(_M1 _S1::*m1, _M2 _S2::*m2) noexcept	{ return false; }	// _TODO:
														inline constexpr bool is_constant_evaluated() noexcept								{ return false; }	// _TODO:

}	// namespace std

#endif	// __XXX_type_traits
