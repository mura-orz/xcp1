///	@file
///	@brief	ISO/IEC14882 C++ standard header <atomic>
///	@author	Mura
///	@copyright	(C) 2024-,  Mura

#ifndef __XXX_atomic
#define __XXX_atomic

#include "cstdint"

//#define __cpp_lib_atomic_flag_test				(201907L)
//#define __cpp_lib_atomic_float					(201711L)
//#define __cpp_lib_atomic_is_always_lock_free		(201603L)
//#define __cpp_lib_atomic_lock_free_type_aliases	(201907L)
//#define __cpp_lib_atomic_ref201806L				(201806L)
//#define __cpp_lib_atomic_value_initialization		(201911L)
//#define __cpp_lib_atomic_wait						(201907L)
//#define __cpp_lib_char8_t							(201907L)

namespace std {

enum class memory_order { _ };	  // TODO:
template<class _T>
_T kill_dependency(_T _y) noexcept { return _T{}; }	   // TODO:

#ifndef ATOMIC_BOOL_LOCK_FREE
#define ATOMIC_BOOL_LOCK_FREE /* TODO: unspecified */
#endif
#ifndef ATOMIC_CHAR_LOCK_FREE
#define ATOMIC_CHAR_LOCK_FREE /* TODO: unspecified */
#endif
#ifndef ATOMIC_CHAR8_T_LOCK_FREE
#define ATOMIC_CHAR8_T_LOCK_FREE /* TODO: unspecified */
#endif
#ifndef ATOMIC_CHAR16_T_LOCK_FREE
#define ATOMIC_CHAR16_T_LOCK_FREE /* TODO: unspecified */
#endif
#ifndef ATOMIC_CHAR16_T_LOCK_FREE
#define ATOMIC_CHAR32_T_LOCK_FREE /* TODO: unspecified */
#endif
#ifndef ATOMIC_WCHAR_T_LOCK_FREE
#define ATOMIC_WCHAR_T_LOCK_FREE /* TODO: unspecified */
#endif
#ifndef ATOMIC_SHORT_LOCK_FREE
#define ATOMIC_SHORT_LOCK_FREE /* TODO: unspecified */
#endif
#ifndef ATOMIC_INT_LOCK_FREE
#define ATOMIC_INT_LOCK_FREE /* TODO: unspecified */
#endif
#ifndef ATOMIC_LONG_LOCK_FREE
#define ATOMIC_LONG_LOCK_FREE /* TODO: unspecified */
#endif
#ifndef ATOMIC_LLONG_LOCK_FRE
#define ATOMIC_LLONG_LOCK_FRE /* TODO: unspecified */
#endif
#ifndef ATOMIC_POINTER_LOCK_FREE
#define ATOMIC_POINTER_LOCK_FREE /* TODO: unspecified */
#endif

template<class _T>
struct atomic_ref {};	 // TODO:
template<class _T>
struct atomic_ref<_T*> {};	  // TODO:
template<class _T>
struct atomic {};	 // TODO:
template<class _T>
struct atomic<_T*> {};	  // TODO:
template<class _T>
inline bool atomic_is_lock_free(const volatile atomic<_T>*) noexcept { return false; }	  // TODO:
template<class _T>
inline bool atomic_is_lock_free(const atomic<_T>*) noexcept { return false; }	 // TODO:

template<class _T>
inline void atomic_store(volatile atomic<_T>*, typename atomic<_T>::value_type) noexcept {}	   // TODO:
template<class _T>
inline void atomic_store(atomic<_T>*, typename atomic<_T>::value_type) noexcept {}	  // TODO:
template<class _T>
inline void atomic_store_explicit(volatile atomic<_T>*, typename atomic<_T>::value_type, memory_order) noexcept {}	  // TODO:
template<class _T>
inline void atomic_store_explicit(atomic<_T>*, typename atomic<_T>::value_type, memory_order) noexcept {}	 // TODO:
template<class _T>
inline _T atomic_load(const volatile atomic<_T>*) noexcept { return _T{}; }	   // TODO:
template<class _T>
inline _T atomic_load(const atomic<_T>*) noexcept { return _T{}; }	  // TODO:
template<class _T>
inline _T atomic_load_explicit(const volatile atomic<_T>*, memory_order) noexcept { return _T{}; }	  // TODO:
template<class _T>
inline _T atomic_load_explicit(const atomic<_T>*, memory_order) noexcept { return _T{}; }	 // TODO:
template<class _T>
inline _T atomic_exchange(volatile atomic<_T>*, typename atomic<_T>::value_type) noexcept { return _T{}; }	  // TODO:
template<class _T>
inline _T atomic_exchange(atomic<_T>*, typename atomic<_T>::value_type) noexcept { return _T{}; }	 // TODO:
template<class _T>
inline _T atomic_exchange_explicit(volatile atomic<_T>*, typename atomic<_T>::value_type, memory_order) noexcept { return _T{}; }	 // TODO:
template<class _T>
inline _T atomic_exchange_explicit(atomic<_T>*, typename atomic<_T>::value_type, memory_order) noexcept { return _T{}; }	// TODO:
template<class _T>
inline bool atomic_compare_exchange_weak(volatile atomic<_T>*, typename atomic<_T>::value_type*, typename atomic<_T>::value_type) noexcept {}	 // TODO:
template<class _T>
inline bool atomic_compare_exchange_weak(atomic<_T>*, typename atomic<_T>::value_type*, typename atomic<_T>::value_type) noexcept {}	// TODO:
template<class _T>
inline bool atomic_compare_exchange_strong(volatile atomic<_T>*, typename atomic<_T>::value_type*, typename atomic<_T>::value_type) noexcept {}	   // TODO:
template<class _T>
inline bool atomic_compare_exchange_strong(atomic<_T>*, typename atomic<_T>::value_type*, typename atomic<_T>::value_type) noexcept {}	  // TODO:
template<class _T>
inline bool atomic_compare_exchange_weak_explicit(volatile atomic<_T>*, typename atomic<_T>::value_type*, typename atomic<_T>::value_type, memory_order, memory_order) noexcept {}	  // TODO:
template<class _T>
inline bool atomic_compare_exchange_weak_explicit(atomic<_T>*, typename atomic<_T>::value_type*, typename atomic<_T>::value_type, memory_order, memory_order) noexcept {}	 // TODO:
template<class _T>
inline bool atomic_compare_exchange_strong_explicit(volatile atomic<_T>*, typename atomic<_T>::value_type*, typename atomic<_T>::value_type, memory_order, memory_order) noexcept {}	// TODO:
template<class _T>
inline bool atomic_compare_exchange_strong_explicit(atomic<_T>*, typename atomic<_T>::value_type*, typename atomic<_T>::value_type, memory_order, memory_order) noexcept {}	   // TODO:

template<class _T>
inline _T atomic_fetch_add(volatile atomic<_T>*, typename atomic<_T>::difference_type) noexcept { return _T{}; }	// TODO:
template<class _T>
inline _T atomic_fetch_add(atomic<_T>*, typename atomic<_T>::difference_type) noexcept { return _T{}; }	   // TODO:
template<class _T>
inline _T atomic_fetch_add_explicit(volatile atomic<_T>*, typename atomic<_T>::difference_type, memory_order) noexcept { return _T{}; }	   // TODO:
template<class _T>
inline _T atomic_fetch_add_explicit(atomic<_T>*, typename atomic<_T>::difference_type, memory_order) noexcept { return _T{}; }	  // TODO:
template<class _T>
inline _T atomic_fetch_sub(volatile atomic<_T>*, typename atomic<_T>::difference_type) noexcept { return _T{}; }	// TODO:
template<class _T>
inline _T atomic_fetch_sub(atomic<_T>*, typename atomic<_T>::difference_type) noexcept { return _T{}; }	   // TODO:
template<class _T>
inline _T atomic_fetch_sub_explicit(volatile atomic<_T>*, typename atomic<_T>::difference_type, memory_order) noexcept { return _T{}; }	   // TODO:
template<class _T>
inline _T atomic_fetch_sub_explicit(atomic<_T>*, typename atomic<_T>::difference_type, memory_order) noexcept { return _T{}; }	  // TODO:
template<class _T>
inline _T atomic_fetch_and(volatile atomic<_T>*, typename atomic<_T>::value_type) noexcept { return _T{}; }	   // TODO:
template<class _T>
inline _T atomic_fetch_and(atomic<_T>*, typename atomic<_T>::value_type) noexcept { return _T{}; }	  // TODO:
template<class _T>
inline _T atomic_fetch_and_explicit(volatile atomic<_T>*, typename atomic<_T>::value_type, memory_order) noexcept { return _T{}; }	  // TODO:
template<class _T>
inline _T atomic_fetch_and_explicit(atomic<_T>*, typename atomic<_T>::value_type, memory_order) noexcept { return _T{}; }	 // TODO:
template<class _T>
inline _T atomic_fetch_or(volatile atomic<_T>*, typename atomic<_T>::value_type) noexcept { return _T{}; }	  // TODO:
template<class _T>
inline _T atomic_fetch_or(atomic<_T>*, typename atomic<_T>::value_type) noexcept { return _T{}; }	 // TODO:
template<class _T>
inline _T atomic_fetch_or_explicit(volatile atomic<_T>*, typename atomic<_T>::value_type, memory_order) noexcept { return _T{}; }	 // TODO:
template<class _T>
inline _T atomic_fetch_or_explicit(atomic<_T>*, typename atomic<_T>::value_type, memory_order) noexcept { return _T{}; }	// TODO:
template<class _T>
inline _T atomic_fetch_xor(volatile atomic<_T>*, typename atomic<_T>::value_type) noexcept { return _T{}; }	   // TODO:
template<class _T>
inline _T atomic_fetch_xor(atomic<_T>*, typename atomic<_T>::value_type) noexcept { return _T{}; }	  // TODO:
template<class _T>
inline _T atomic_fetch_xor_explicit(volatile atomic<_T>*, typename atomic<_T>::value_type, memory_order) noexcept { return _T{}; }	  // TODO:
template<class _T>
inline _T atomic_fetch_xor_explicit(atomic<_T>*, typename atomic<_T>::value_type, memory_order) noexcept { return _T{}; }	 // TODO:
template<class _T>
inline void atomic_wait(const volatile atomic<_T>*, typename atomic<_T>::value_type) {}	   // TODO:
template<class _T>
inline void atomic_wait(const atomic<_T>*, typename atomic<_T>::value_type) {}	  // TODO:
template<class _T>
inline void atomic_wait_explicit(const volatile atomic<_T>*, typename atomic<_T>::value_type, memory_order) {}	  // TODO:
template<class _T>
inline void atomic_wait_explicit(const atomic<_T>*, typename atomic<_T>::value_type, memory_order) {}	 // TODO:
template<class _T>
inline void atomic_notify_one(volatile atomic<_T>*) {}	  // TODO:

template<class _T>
inline void atomic_notify_one(atomic<_T>*) {}	 // TODO:
template<class _T>
inline void atomic_notify_all(volatile atomic<_T>*) {}	  // TODO:
template<class _T>
inline void atomic_notify_all(atomic<_T>*) {}	 // TODO:

using atomic_bool				= atomic<bool>;
using atomic_char				= atomic<char>;
using atomic_schar				= atomic<signed char>;
using atomic_uchar				= atomic<unsigned char>;
using atomic_short				= atomic<short>;
using atomic_ushort				= atomic<unsigned short>;
using atomic_int				= atomic<int>;
using atomic_uint				= atomic<unsigned int>;
using atomic_long				= atomic<long>;
using atomic_ulong				= atomic<unsigned long>;
using atomic_llong				= atomic<long long>;
using atomic_ullong				= atomic<unsigned long long>;
using atomic_char8_t			= atomic<char8_t>;
using atomic_char16_t			= atomic<char16_t>;
using atomic_char32_t			= atomic<char32_t>;
using atomic_wchar_t			= atomic<wchar_t>;
using atomic_int8_t				= atomic<int8_t>;
using atomic_uint8_t			= atomic<uint8_t>;
using atomic_int16_t			= atomic<int16_t>;
using atomic_uint16_t			= atomic<uint16_t>;
using atomic_int32_t			= atomic<int32_t>;
using atomic_uint32_t			= atomic<uint32_t>;
using atomic_int64_t			= atomic<int64_t>;
using atomic_uint64_t			= atomic<uint64_t>;
using atomic_int_least8_t		= atomic<int_least8_t>;
using atomic_uint_least8_t		= atomic<uint_least8_t>;
using atomic_int_least16_t		= atomic<int_least16_t>;
using atomic_uint_least16_t		= atomic<uint_least16_t>;
using atomic_int_least32_t		= atomic<int_least32_t>;
using atomic_uint_least32_t		= atomic<uint_least32_t>;
using atomic_int_least64_t		= atomic<int_least64_t>;
using atomic_uint_least64_t		= atomic<uint_least64_t>;
using atomic_int_fast8_t		= atomic<int_fast8_t>;
using atomic_uint_fast8_t		= atomic<uint_fast8_t>;
using atomic_int_fast16_t		= atomic<int_fast16_t>;
using atomic_uint_fast16_t		= atomic<uint_fast16_t>;
using atomic_int_fast32_t		= atomic<int_fast32_t>;
using atomic_uint_fast32_t		= atomic<uint_fast32_t>;
using atomic_int_fast64_t		= atomic<int_fast64_t>;
using atomic_uint_fast64_t		= atomic<uint_fast64_t>;
using atomic_intptr_t			= atomic<intptr_t>;
using atomic_uintptr_t			= atomic<uintptr_t>;
using atomic_size_t				= atomic<size_t>;
using atomic_ptrdiff_t			= atomic<ptrdiff_t>;
using atomic_intmax_t			= atomic<intmax_t>;
using atomic_uintmax_t			= atomic<uintmax_t>;
using atomic_signed_lock_free	= int;	  // TODO:
using atomic_unsigned_lock_free = int;	  // TODO:

struct atomic_flag {};

inline bool atomic_flag_test(const atomic_flag*) noexcept {}										  // TODO:
inline bool atomic_flag_test_explicit(const volatile atomic_flag*, memory_order) noexcept {}		  // TODO:
inline bool atomic_flag_test_explicit(const atomic_flag*, memory_order) noexcept {}					  // TODO:
inline bool atomic_flag_test_and_set(volatile atomic_flag*) noexcept {}								  // TODO:
inline bool atomic_flag_test_and_set(atomic_flag*) noexcept {}										  // TODO:
inline bool atomic_flag_test_and_set_explicit(volatile atomic_flag*, memory_order) noexcept {}		  // TODO:
inline bool atomic_flag_test_and_set_explicit(atomic_flag*, memory_order) noexcept {}				  // TODO:
inline void atomic_flag_clear(volatile atomic_flag*) noexcept {}									  // TODO:
inline void atomic_flag_clear(atomic_flag*) noexcept {}												  // TODO:
inline void atomic_flag_clear_explicit(volatile atomic_flag*, memory_order) noexcept {}				  // TODO:
inline void atomic_flag_clear_explicit(atomic_flag*, memory_order) noexcept {}						  // TODO:
inline void atomic_flag_wait(const volatile atomic_flag*, bool) noexcept {}							  // TODO:
inline void atomic_flag_wait(const atomic_flag*, bool) noexcept {}									  // TODO:
inline void atomic_flag_wait_explicit(const volatile atomic_flag*, bool, memory_order) noexcept {}	  // TODO:
inline void atomic_flag_wait_explicit(const atomic_flag*, bool, memory_order) noexcept {}			  // TODO:
inline void atomic_flag_notify_one(volatile atomic_flag*) noexcept {}								  // TODO:
inline void atomic_flag_notify_one(atomic_flag*) noexcept {}										  // TODO:																		}  // TODO:
inline void atomic_flag_notify_all(volatile atomic_flag*) noexcept {}								  // TODO:
inline void atomic_flag_notify_all(atomic_flag*) noexcept {}										  // TODO:

extern "C" inline void atomic_thread_fence(memory_order) noexcept {}	// TODO:
extern "C" inline void atomic_signal_fence(memory_order) noexcept {}	// TODO:

}	 // namespace std

#endif	  // __XXX_atomic
